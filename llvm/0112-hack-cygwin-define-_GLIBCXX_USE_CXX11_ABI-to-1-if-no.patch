From b9f9edfd167aa1a50a8c4fd0360a9db6421b5f0f Mon Sep 17 00:00:00 2001
From: Jeremy Drake <github@jdrake.com>
Date: Wed, 16 Apr 2025 12:02:07 -0700
Subject: [PATCH 16/16] hack: cygwin: define _GLIBCXX_USE_CXX11_ABI to 1 if not
 previously defined

work around llvm/llvm-project#135910
see also msys2/MSYS2-packages#5329
---
 clang/lib/Driver/ToolChains/Cygwin.cpp | 17 +++++++++++++++++
 clang/lib/Driver/ToolChains/Cygwin.h   |  5 +++++
 2 files changed, 22 insertions(+)

diff --git a/clang/lib/Driver/ToolChains/Cygwin.cpp b/clang/lib/Driver/ToolChains/Cygwin.cpp
index 62ac12923..552a26726 100644
--- a/clang/lib/Driver/ToolChains/Cygwin.cpp
+++ b/clang/lib/Driver/ToolChains/Cygwin.cpp
@@ -100,3 +100,20 @@ void Cygwin::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
   addExternCSystemInclude(DriverArgs, CC1Args, SysRoot + "/usr/include");
   addExternCSystemInclude(DriverArgs, CC1Args, SysRoot + "/usr/include/w32api");
 }
+
+void Cygwin::addClangTargetOptions(const ArgList &DriverArgs,
+                                   ArgStringList &CC1Args,
+                                   Action::OffloadKind) const {
+  auto findMacroDefinition = [&](const std::string &Macro) {
+    auto MacroDefs = DriverArgs.getAllArgValues(options::OPT_D);
+    if (MacroDefs.empty())
+      return false;
+    std::string MacroEquals(Macro + '=');
+    return llvm::any_of(MacroDefs, [&](const std::string &M) {
+      return M == Macro || M.rfind(MacroEquals, 0) != std::string::npos;
+    });
+  };
+
+  if (getDriver().CCCIsCXX() && !findMacroDefinition("_GLIBCXX_USE_CXX11_ABI"))
+    CC1Args.push_back("-D_GLIBCXX_USE_CXX11_ABI=1");
+}
diff --git a/clang/lib/Driver/ToolChains/Cygwin.h b/clang/lib/Driver/ToolChains/Cygwin.h
index 3a4a2cf4f..05d664d38 100644
--- a/clang/lib/Driver/ToolChains/Cygwin.h
+++ b/clang/lib/Driver/ToolChains/Cygwin.h
@@ -24,6 +24,11 @@ public:
   void
   AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
                             llvm::opt::ArgStringList &CC1Args) const override;
+
+  void
+  addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                        llvm::opt::ArgStringList &CC1Args,
+                        Action::OffloadKind DeviceOffloadKind) const override;
 };
 
 } // end namespace toolchains
-- 
2.49.0.windows.1

