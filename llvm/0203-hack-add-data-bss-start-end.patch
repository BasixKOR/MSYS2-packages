From 03dd9259f5d37b861387607af8e77610a8d94499 Mon Sep 17 00:00:00 2001
From: Jeremy Drake <github@jdrake.com>
Date: Sun, 13 Apr 2025 22:41:05 -0700
Subject: [PATCH 12/15] [LLD][COFF] add __{data,bss}_{start,end}__ symbols for
 Cygwin support

---
 lld/COFF/Driver.cpp |  5 +++++
 lld/COFF/Writer.cpp | 36 ++++++++++++++++++++++++++++++++++--
 2 files changed, 39 insertions(+), 2 deletions(-)

diff --git a/lld/COFF/Driver.cpp b/lld/COFF/Driver.cpp
index ac3ac57bd..fa882f883 100644
--- a/lld/COFF/Driver.cpp
+++ b/lld/COFF/Driver.cpp
@@ -2018,6 +2018,7 @@ void LinkerDriver::linkerMain(ArrayRef<const char *> argsArr) {
     parseMerge(".ctors=.rdata");
     parseMerge(".dtors=.rdata");
     parseMerge(".CRT=.rdata");
+    parseMerge(".data_cygwin_nocopy=.data");
   }
 
   // Handle /section
@@ -2474,6 +2475,10 @@ void LinkerDriver::linkerMain(ArrayRef<const char *> argsArr) {
     if (config->mingw) {
       symtab.addAbsolute(symtab.mangle("__CTOR_LIST__"), 0);
       symtab.addAbsolute(symtab.mangle("__DTOR_LIST__"), 0);
+      symtab.addAbsolute("__data_start__", 0);
+      symtab.addAbsolute("__data_end__", 0);
+      symtab.addAbsolute("__bss_start__", 0);
+      symtab.addAbsolute("__bss_end__", 0);
     }
     if (config->debug || config->buildIDHash != BuildIDHash::None)
       if (symtab.findUnderscore("__buildid"))
diff --git a/lld/COFF/Writer.cpp b/lld/COFF/Writer.cpp
index 2bdaeb58a..3b3c490f5 100644
--- a/lld/COFF/Writer.cpp
+++ b/lld/COFF/Writer.cpp
@@ -239,6 +239,7 @@ private:
   void createRuntimePseudoRelocs();
   void createECChunks();
   void insertCtorDtorSymbols();
+  void insertBssDataStartEndSymbols();
   void markSymbolsWithRelocations(ObjFile *file, SymbolRVASet &usedSymbols);
   void createGuardCFTables();
   void markSymbolsForRVATable(ObjFile *file,
@@ -314,6 +315,7 @@ private:
 
   OutputSection *textSec;
   OutputSection *hexpthkSec;
+  OutputSection *bssSec;
   OutputSection *rdataSec;
   OutputSection *buildidSec;
   OutputSection *dataSec;
@@ -1068,7 +1070,7 @@ void Writer::createSections() {
   textSec = createSection(".text", code | r | x);
   if (isArm64EC(ctx.config.machine))
     hexpthkSec = createSection(".hexpthk", code | r | x);
-  createSection(".bss", bss | r | w);
+  bssSec = createSection(".bss", bss | r | w);
   rdataSec = createSection(".rdata", data | r);
   buildidSec = createSection(".buildid", data | r);
   dataSec = createSection(".data", data | r | w);
@@ -1242,8 +1244,10 @@ void Writer::createMiscChunks() {
   if (config->autoImport)
     createRuntimePseudoRelocs();
 
-  if (config->mingw)
+  if (config->mingw) {
     insertCtorDtorSymbols();
+    insertBssDataStartEndSymbols();
+  }
 }
 
 // Create .idata section for the DLL-imported symbol table.
@@ -2334,6 +2338,34 @@ void Writer::insertCtorDtorSymbols() {
                                   dtorListHead);
 }
 
+// MinGW (really, Cygwin) specific.
+// The Cygwin startup code uses __data_start__ __data_end__ __bss_start__
+// and __bss_end__ to know what to copy during fork emulation.
+void Writer::insertBssDataStartEndSymbols() {
+  EmptyChunk *startOfData = make<EmptyChunk>();
+  EmptyChunk *endOfData = make<EmptyChunk>();
+  EmptyChunk *startOfBss = make<EmptyChunk>();
+  EmptyChunk *endOfBss = make<EmptyChunk>();
+  dataSec->insertChunkAtStart(startOfData);
+  dataSec->addChunk(endOfData);
+  bssSec->insertChunkAtStart(startOfBss);
+  bssSec->addChunk(endOfBss);
+
+  Symbol *dataStartSym = ctx.symtab.find("__data_start__");
+  Symbol *dataEndSym = ctx.symtab.find("__data_end__");
+  Symbol *bssStartSym = ctx.symtab.find("__bss_start__");
+  Symbol *bssEndSym = ctx.symtab.find("__bss_end__");
+  replaceSymbol<DefinedSynthetic>(dataStartSym, dataStartSym->getName(),
+                                  startOfData);
+  replaceSymbol<DefinedSynthetic>(dataEndSym, dataEndSym->getName(),
+                                  endOfData);
+  replaceSymbol<DefinedSynthetic>(bssStartSym, bssStartSym->getName(),
+                                  startOfBss);
+  replaceSymbol<DefinedSynthetic>(bssEndSym, bssEndSym->getName(),
+                                  endOfBss);
+
+}
+
 // Handles /section options to allow users to overwrite
 // section attributes.
 void Writer::setSectionPermissions() {
-- 
2.49.0.windows.1

